---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  {{- if .Values.deployment.annotations }}
  annotations:
{{ toYaml .Values.deployment.annotations | indent 4 }}
  {{- end }}
  labels:
    {{- include "refractr.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: "25%"
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "refractr.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "refractr.selectorLabels" . | nindent 8 }}
      annotations:
        {{- if .Values.metrics.enabled }}
        prometheus.io/port: {{ .Values.metrics.port | quote }}
        prometheus.io/scrape: "true"
        {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "refractr.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag}}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.deployment.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            successThreshold: 3
            httpGet:
              path: /
              port: http
          envFrom:
          - secretRef:
              name: {{ .Values.deployment.name }}
          {{- if .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
{{- if .Values.deployment.extraContainers }}
      {{- toYaml .Values.deployment.extraContainers | nindent 8 }}
{{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: {{ template "nginx.metrics.image" . }}
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          command: ['/usr/bin/exporter', '-nginx.scrape-uri', 'http://127.0.0.1:80/status']
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
          livenessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 15
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /metrics
              port: metrics
            initialDelaySeconds: 5
            timeoutSeconds: 1
          {{- if .Values.metrics.resources }}
          resources: {{- toYaml .Values.metrics.resources | nindent 12 }}
          {{- end }}
        {{- end }}
{{- if .Values.deployment.extraVolumes }}
      volumes:
      {{- toYaml .Values.deployment.extraVolumes | nindent 6 }}
{{- end }}
